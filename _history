{"entries":[{"timestamp":1734030203018,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":111}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":247,"start2":247,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1734030202316,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"class Position {\n    constructor(public x: number, public y: number) {\n    }\n\n    can_drop(state: State): boolean {\n        \n        if (current.y == 4) {\n            return false\n        }\n\n        for (let position of state) {\n            if (position.x == current.x\n             && position.y == current.y + 1) {\n                return false\n            }\n        }\n\n        return true\n    }\n}\n\ntype State = Array<Position>\n\nlet state: State = []\n\nlet current: Position = new Position(2, 0)\n\ncontrol.setInterval(() => {\n    led.unplot(current.x, current.y)\n\n    if (current.can_drop(state)) {\n        current.y = Math.clamp(0, 4, current.y + 1)\n    }\n    else {\n        state.push(current)\n        current = new Position(2, 0)\n    }\n\n}, 1000, control.IntervalMode.Interval)\n\nbasic.forever(() => {\n\n    for (let pos of state)\n        led.plot(pos.x, pos.y)\n\n    led.plot(current.x, current.y)\n})\n\n\ninput.onButtonPressed(Button.A, () => {\n    led.unplot(current.x, current.y)\n    current.x = Math.clamp(0, 4, current.x - 1) // move left\n})\n\ninput.onButtonPressed(Button.B, () => {\n    led.unplot(current.x, current.y)\n    current.x = Math.clamp(0, 4, current.x + 1) // move right\n})\n","README.md":"","main.py":"def on_forever():\n    pass\nbasic.forever(on_forever)\n\ndef on_button_pressed_a():\n    pass\ninput.on_button_pressed(Button.A, on_button_pressed_a)","pxt.json":"{\n    \"name\": \"tetro:bit\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v7.0.51\",\n        \"tag\": \"v7.0.51\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/c3819f016bd720d0eb86efea9a84dcd4fc7b2e1f\",\n        \"target\": \"7.0.51\",\n        \"pxt\": \"11.1.5\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1734030229573}